// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name GumletInsightsAVPlayer
import AVFoundation
import AVKit
import Foundation
import MachO
import Security
import Swift
import SystemConfiguration
import UIKit
import WebKit
@objc @_inheritsConvenienceInitializers public class AVPlayerCore : ObjectiveC.NSObject {
  public class func randomStringForId(_ n: Swift.Int) -> Swift.String
  public func setupPlayer(playerAV: AVFoundation.AVPlayer, propertyId: Swift.String)
  public func callEventSetUp(videoURL: Swift.String)
  public func playerReady()
  public func callPlay()
  public func callPlaying()
  public func callPause()
  public func callBufferingStart()
  public func callBufferingEnd()
  public func callVideoChange()
  @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  public func init_SDK(propertyId: Swift.String)
  @objc deinit
  @objc override dynamic public init()
}
public struct GumletInsightsConfig {
  public var proprtyId: Swift.String
  public init()
  public init(proprtyId: Swift.String)
}
public struct GumletInsightsDeviceData {
  public static func getDeviceData() -> [Swift.String : Any]
}
public enum Model : Swift.String {
  case simulator, iPod1, iPod2, iPod3, iPod4, iPod5, iPod6, iPod7, iPad2, iPad3, iPad4, iPadAir, iPadAir2, iPadAir3, iPadAir4, iPad5, iPad6, iPad7, iPad8, iPad9, iPadMini, iPadMini2, iPadMini3, iPadMini4, iPadMini5, iPadMini6, iPadPro9_7, iPadPro10_5, iPadPro11, iPadPro2_11, iPadPro3_11, iPadPro12_9, iPadPro2_12_9, iPadPro3_12_9, iPadPro4_12_9, iPadPro5_12_9, iPhone4, iPhone4S, iPhone5, iPhone5S, iPhone5C, iPhone6, iPhone6Plus, iPhone6S, iPhone6SPlus, iPhoneSE, iPhone7, iPhone7Plus, iPhone8, iPhone8Plus, iPhoneX, iPhoneXS, iPhoneXSMax, iPhoneXR, iPhone11, iPhone11Pro, iPhone11ProMax, iPhoneSE2, iPhone12Mini, iPhone12, iPhone12Pro, iPhone12ProMax, iPhone13Mini, iPhone13, iPhone13Pro, iPhone13ProMax, AppleWatch1, AppleWatchS1, AppleWatchS2, AppleWatchS3, AppleWatchS4, AppleWatchS5, AppleWatchSE, AppleWatchS6, AppleTV1, AppleTV2, AppleTV3, AppleTV4, AppleTV_4K, AppleTV2_4K, unrecognized
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
extension UIDevice {
  public var type: GumletInsightsAVPlayer.Model {
    get
  }
}
public struct GumletInsightsUserData {
  public var userName: Swift.String
  public var userEmail: Swift.String
  public var userPhone: Swift.String
  public var userProfileImage: Swift.String
  public var userAddressLine1: Swift.String
  public var userAddressLine2: Swift.String
  public var userCity: Swift.String
  public var userState: Swift.String
  public var userCountry: Swift.String
  public var userZipcode: Swift.String
  public init()
  public init(userName: Swift.String, userEmail: Swift.String, userPhone: Swift.String, userProfileImage: Swift.String, userAddressLine1: Swift.String, userAddressLine2: Swift.String, userCity: Swift.String, userState: Swift.String, userCountry: Swift.String, userZipcode: Swift.String)
}
public struct GumletInsightsCustomData {
  public var customUserId: Swift.String
  public var customData1: Swift.String
  public var customData2: Swift.String
  public var customData3: Swift.String
  public var customData4: Swift.String
  public var customData5: Swift.String
  public var customData6: Swift.String
  public var customData7: Swift.String
  public var customData8: Swift.String
  public var customData9: Swift.String
  public var customData10: Swift.String
  public init()
  public init(customUserId: Swift.String, customData1: Swift.String, customData2: Swift.String, customData3: Swift.String, customData4: Swift.String, customData5: Swift.String, customData6: Swift.String, customData7: Swift.String, customData8: Swift.String, customData9: Swift.String, customData10: Swift.String)
}
public struct GumletInsightsCustomVideoData {
  public var customContentType: Swift.String
  public var customVideoDurationMillis: Swift.String
  public var customEncodingVariant: Swift.String
  public var customVideoLanguage: Swift.String
  public var customVideoId: Swift.String
  public var customVideoSeries: Swift.String
  public var customVideoProducer: Swift.String
  public var customVideotitle: Swift.String
  public var customVideoVariantName: Swift.String
  public var customVideoVariant: Swift.String
  public init()
  public init(customContentType: Swift.String, customVideoDurationMillis: Swift.String, customEncodingVariant: Swift.String, customVideoLanguage: Swift.String, customVideoId: Swift.String, customVideoSeries: Swift.String, customVideoProducer: Swift.String, customVideotitle: Swift.String, customVideoVariantName: Swift.String, customVideoVariant: Swift.String)
}
@_hasMissingDesignatedInitializers public class HTTPClient {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class GumletInsightsSDK {
  public static func version() -> Swift.String
  public static func browser_version() -> Swift.String
  public class func initAVPlayerViewController(_ playerViewController: AVKit.AVPlayerViewController, userData: GumletInsightsAVPlayer.GumletInsightsUserData? = nil, customData: GumletInsightsAVPlayer.GumletInsightsCustomData? = nil, customVideoData: GumletInsightsAVPlayer.GumletInsightsCustomVideoData? = nil, customPlayerData: GumletInsightsAVPlayer.GumletInsightsCustomPlayerData? = nil, config: GumletInsightsAVPlayer.GumletInsightsConfig)
  public class func initAVPlayerLayer(_ playerLayer: AVFoundation.AVPlayerLayer, userData: GumletInsightsAVPlayer.GumletInsightsUserData? = nil, customData: GumletInsightsAVPlayer.GumletInsightsCustomData? = nil, customVideoData: GumletInsightsAVPlayer.GumletInsightsCustomPlayerData? = nil, config: GumletInsightsAVPlayer.GumletInsightsConfig)
  public class func userPersonalData() -> [Swift.String : Any]?
  public class func getCustomData() -> [Swift.String : Any]?
  public class func getCustomPlayerData() -> [Swift.String : Any]?
  public class func getCustomVideoData() -> [Swift.String : Any]?
  @objc deinit
}
public struct GumletInsightsCustomPlayerData {
  public var GumletPlayerName: Swift.String
  public var GumletPlayerIntegrationVersion: Swift.String
  public var gumletPageType: Swift.String
  public init()
  public init(gumletPageType: Swift.String, GumletPlayerIntegrationVersion: Swift.String, GumletPlayerName: Swift.String)
}
public struct GumletInsightsOSData {
  public static func getOSData() -> [Swift.String : Any]
}
@_inheritsConvenienceInitializers @objc open class KeychainSwift : ObjectiveC.NSObject {
  open var lastResultCode: Darwin.OSStatus
  open var accessGroup: Swift.String?
  open var synchronizable: Swift.Bool
  @objc override dynamic public init()
  public init(keyPrefix: Swift.String)
  @discardableResult
  @objc open func set(_ value: Swift.String, forKey key: Swift.String) -> Swift.Bool
  @discardableResult
  open func set(_ value: Foundation.Data, forKey key: Swift.String, withAccess access: GumletInsightsAVPlayer.KeychainSwiftAccessOptions? = nil) -> Swift.Bool
  @discardableResult
  open func set(_ value: Swift.Bool, forKey key: Swift.String, withAccess access: GumletInsightsAVPlayer.KeychainSwiftAccessOptions? = nil) -> Swift.Bool
  @objc open func get(_ key: Swift.String) -> Swift.String?
  open func getData(_ key: Swift.String) -> Foundation.Data?
  open func getBool(_ key: Swift.String) -> Swift.Bool?
  @discardableResult
  open func delete(_ key: Swift.String) -> Swift.Bool
  @discardableResult
  open func clear() -> Swift.Bool
  @objc deinit
}
public struct KeychainSwiftConstants {
  public static var accessGroup: Swift.String {
    get
  }
  public static var accessible: Swift.String {
    get
  }
  public static var attrAccount: Swift.String {
    get
  }
  public static var attrSynchronizable: Swift.String {
    get
  }
  public static var klass: Swift.String {
    get
  }
  public static var matchLimit: Swift.String {
    get
  }
  public static var returnData: Swift.String {
    get
  }
  public static var valueData: Swift.String {
    get
  }
}
public enum KeychainSwiftAccessOptions {
  case accessibleWhenUnlocked
  case accessibleWhenUnlockedThisDeviceOnly
  case accessibleAfterFirstUnlock
  case accessibleAfterFirstUnlockThisDeviceOnly
  case accessibleAlways
  case accessibleWhenPasscodeSetThisDeviceOnly
  case accessibleAlwaysThisDeviceOnly
  public static func == (a: GumletInsightsAVPlayer.KeychainSwiftAccessOptions, b: GumletInsightsAVPlayer.KeychainSwiftAccessOptions) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
extension GumletInsightsAVPlayer.Model : Swift.Equatable {}
extension GumletInsightsAVPlayer.Model : Swift.Hashable {}
extension GumletInsightsAVPlayer.Model : Swift.RawRepresentable {}
extension GumletInsightsAVPlayer.KeychainSwiftAccessOptions : Swift.Equatable {}
extension GumletInsightsAVPlayer.KeychainSwiftAccessOptions : Swift.Hashable {}
